
    /**
     *   ----- Method One [--- Calling multiple APIs at once---]
     * use a fetch to make multiple api call
     * let datafile1 = fetch("./data.json")
     * let datafile2 = fetch("./data.json")
     * Promise.all([datafile1, datafile2])
                                    .then(files => {
                                        files.map(el => {
                                            processData(el.json());
                                        })
                                    }).catch(err => {
                                        console.error(err);
                                    })

     * 
     * then create a separate function to resolve the promise
     * const processData = promise => {
        promise 
            .then (data => {
                console.log(data);
                
                drawTeamList(data);
                return data
                // return data;
            })
}

 ---------------------------- same one ---------------------------
 Promise.all([
	fetch('https://jsonplaceholder.typicode.com/posts'),
	fetch('https://jsonplaceholder.typicode.com/users')
]).then(function (responses) {
	// Get a JSON object from each of the responses
	return Promise.all(responses.map(function (response) {
		return response.json();
	}));
}).then(function (data) {
	// Log the data to the console
	// You would do something with both sets of data here
	console.log(data);
}).catch(function (error) {
	// if there's an error, log it
	console.log(error);
});

---------------- Method Two [---Calling multiple APIs in sequence--------------]

      const teamInfoUrl = "http://localhost:8080/api/teamInfo";
       const teamUrl = "http://localhost:8080/api/teamUrl";

         fetch(teamInfoUrl)
               .then(response => response.json())
               .then(data  => {
                    console.log(data);
                    return fetch(teamUrl)
                                        .then(response => response.json())
                                        .then(imgItems => {
                                            console.log(imgItems);
                                            drawTeamList(imgItems);
                                        }).catch(err => {
                                            console.error(err);
                                        });
                }); 



/*** The Object.entries() ***/
* The Object.entries() method returns an array of a given object's own enumerable string-keyed property [key, value] pairs, 
* in the same order as that provided by a for...in loop. 
* (The only important difference is that a for...in loop enumerates properties in the prototype chain as well). 
* The order of the array returned by Object.entries() does not depend on how an object is defined. 
* If there is a need for certain ordering, then the array should be sorted first, 
*** like Object.entries(obj).sort((a, b) => b[0].localeCompare(a[0]));.

/** example **
**   const object1 = {
      a: 'somestring',
      b: 42
     };

     for (const [key, value] of Object.entries(object1)) {
     console.log(`${key}: ${value}`);
     }

// expected output:
// "a: somestring"
// "b: 42"
// order is not guaranteed

*/


/****
*   The sort() method sorts the elements of an array in place and returns the sorted array. 
*   The default sort order is ascending, built upon converting the elements into strings, 
*   then comparing their sequences of UTF-16 code units values.
*
**** example ****
*    const months = ['March', 'Jan', 'Feb', 'Dec'];
*    months.sort();
*    console.log(months);
*    // expected output: Array ["Dec", "Feb", "Jan", "March"]
*/

/**
** EJS with Node js ***************************
*/

router.get('/api/draft', (req, res) => {
    let mascots = [
        { name: 'Sammy', organization: "DigitalOcean", birth_year: 2012},
        { name: 'Tux', organization: "Linux", birth_year: 1996},
        { name: 'Moby Dock', organization: "Docker", birth_year: 2013}
    ];
    let tagline = "No programming concept is complete without a cute animal mascot.";
    res.render('pages/login', {imageMascots: mascots, tag: tagline});
});


<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../partials/head'); %>
</head>
<body>
    <%- include('../partials/header'); %>
    <h2>variables injection</h2>
    <span><%= tag %></span>

    <ul>
        <% imageMascots.forEach((item) => { %>
            <li>
                <strong><%= item.name %></strong>
                representing <%= item.organization %>, born <%= item.birth_year %>
            </li>
        <% }); %>
    </ul>
    <%- include('../partials/loginBody'); %>
</body>
</html>


/**
* populate html table using EJS with node JS and Mongodb
**/
===============controller =======================
var express = require("express"),
app = express(),
bodyparser = require("body-parser"),
mongoose = require("mongoose");
mongoose.connect("mongodb://localhost:27017/commuters", {useNewUrlParser: true});

app.use(bodyparser.urlencoded({ extended: true }));
app.set("view engine", "ejs");

var schema = new mongoose.Schema({
  route : String,
  origin : String,
  destination : String,
  estimatedTimeOfArrival : String,
  date : String,
  time : String
}) 
var detailsModel = mongoose.model("detailsModel", schema);
app.get("/", function (req, res) {
res.render("index",{ details: null })
})
app.get("/getdetails", function (req, res) {   
detailsModel.find({}, function (err, allDetails) {
    if (err) {
        console.log(err);
    } else {
        res.render("index", { details: allDetails })
    }
})
})
app.listen(3000, "localhost", function () {
console.log("server has started");
})

===============EJS ===========


<table class="table table-striped table-primary">
        <thead>
          <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Emp Type</th>
            <th>Hourly Rate</th>
            <th>Total Hours</th>
            <th>Total Amount</th>
          </tr>
        </thead>
        <tbody>
          <%if (records.length >0){ %>
          <% records.forEach(function(row){ %>
          <tr>
            <td><%= row.name %></td>
            <td><%= row.email %></td>
            <td><%= row.etype %></td>
            <td><%= row.hourlyrate %></td>
            <td><%= row.totalHour %></td>
            <td><%= row.total %></td>
          </tr>
          <% })}else{ %>
            <tr>
                <td colspan="6">No Record Found</td>
                
              </tr>
            <% } %>
        </tbody>
      </table>