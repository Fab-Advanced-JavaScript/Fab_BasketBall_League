
    /**
     *   ----- Method One [--- Calling multiple APIs at once---]
     * use a fetch to make multiple api call
     * let datafile1 = fetch("./data.json")
     * let datafile2 = fetch("./data.json")
     * Promise.all([datafile1, datafile2])
                                    .then(files => {
                                        <--files[0].json()
                                           --- files[1].json()
                                            -->
                                        files.map(el => {
                                            processData(el.json());
                                        })
                                    }).catch(err => {
                                        console.error(err);
                                    })

     * 
     * then create a separate function to resolve the promise
     * const processData = promise => {
        promise 
            .then (data => {
                console.log(data);
                
                drawTeamList(data);
                return data
                // return data;
            })
}

 ---------------------------- same one ---------------------------
 Promise.all([
	fetch('https://jsonplaceholder.typicode.com/posts'),
	fetch('https://jsonplaceholder.typicode.com/users')
]).then(function (responses) {
	// Get a JSON object from each of the responses
	return Promise.all(responses.map(function (response) {
		return response.json();
	}));
}).then(function (data) {
	// Log the data to the console
	// You would do something with both sets of data here
	console.log(data);
}).catch(function (error) {
	// if there's an error, log it
	console.log(error);
});

---------------- Method Two [---Calling multiple APIs in sequence--------------]

      const teamInfoUrl = "http://localhost:8080/api/teamInfo";
       const teamUrl = "http://localhost:8080/api/teamUrl";

         fetch(teamInfoUrl)
               .then(response => response.json())
               .then(data  => {
                    console.log(data);
                    return fetch(teamUrl)
                                        .then(response => response.json())
                                        .then(imgItems => {
                                            console.log(imgItems);
                                            drawTeamList(imgItems);
                                        }).catch(err => {
                                            console.error(err);
                                        });
                }); 



/*** The Object.entries() ***/
* The Object.entries() method returns an array of a given object's own enumerable string-keyed property [key, value] pairs, 
* in the same order as that provided by a for...in loop. 
* (The only important difference is that a for...in loop enumerates properties in the prototype chain as well). 
* The order of the array returned by Object.entries() does not depend on how an object is defined. 
* If there is a need for certain ordering, then the array should be sorted first, 
*** like Object.entries(obj).sort((a, b) => b[0].localeCompare(a[0]));.

/** example **
**   const object1 = {
      a: 'somestring',
      b: 42
     };

     for (const [key, value] of Object.entries(object1)) {
     console.log(`${key}: ${value}`);
     }

// expected output:
// "a: somestring"
// "b: 42"
// order is not guaranteed

*/


/****
*   The sort() method sorts the elements of an array in place and returns the sorted array. 
*   The default sort order is ascending, built upon converting the elements into strings, 
*   then comparing their sequences of UTF-16 code units values.
*
**** example ****
*    const months = ['March', 'Jan', 'Feb', 'Dec'];
*    months.sort();
*    console.log(months);
*    // expected output: Array ["Dec", "Feb", "Jan", "March"]
*/

/**
** EJS with Node js ***************************
*/

router.get('/api/draft', (req, res) => {
    let mascots = [
        { name: 'Sammy', organization: "DigitalOcean", birth_year: 2012},
        { name: 'Tux', organization: "Linux", birth_year: 1996},
        { name: 'Moby Dock', organization: "Docker", birth_year: 2013}
    ];
    let tagline = "No programming concept is complete without a cute animal mascot.";
    res.render('pages/login', {imageMascots: mascots, tag: tagline});
});


<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../partials/head'); %>
</head>
<body>
    <%- include('../partials/header'); %>
    <h2>variables injection</h2>
    <span><%= tag %></span>

    <ul>
        <% imageMascots.forEach((item) => { %>
            <li>
                <strong><%= item.name %></strong>
                representing <%= item.organization %>, born <%= item.birth_year %>
            </li>
        <% }); %>
    </ul>
    <%- include('../partials/loginBody'); %>
</body>
</html>


/**
* populate html table using EJS with node JS and Mongodb
**/
===============controller =======================
var express = require("express"),
app = express(),
bodyparser = require("body-parser"),
mongoose = require("mongoose");
mongoose.connect("mongodb://localhost:27017/commuters", {useNewUrlParser: true});

app.use(bodyparser.urlencoded({ extended: true }));
app.set("view engine", "ejs");

var schema = new mongoose.Schema({
  route : String,
  origin : String,
  destination : String,
  estimatedTimeOfArrival : String,
  date : String,
  time : String
}) 
var detailsModel = mongoose.model("detailsModel", schema);
app.get("/", function (req, res) {
res.render("index",{ details: null })
})
app.get("/getdetails", function (req, res) {   
detailsModel.find({}, function (err, allDetails) {
    if (err) {
        console.log(err);
    } else {
        res.render("index", { details: allDetails })
    }
})
})
app.listen(3000, "localhost", function () {
console.log("server has started");
})

===============EJS ===========


<table class="table table-striped table-primary">
        <thead>
          <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Emp Type</th>
            <th>Hourly Rate</th>
            <th>Total Hours</th>
            <th>Total Amount</th>
          </tr>
        </thead>
        <tbody>
          <%if (records.length >0){ %>
          <% records.forEach(function(row){ %>
          <tr>
            <td><%= row.name %></td>
            <td><%= row.email %></td>
            <td><%= row.etype %></td>
            <td><%= row.hourlyrate %></td>
            <td><%= row.totalHour %></td>
            <td><%= row.total %></td>
          </tr>
          <% })}else{ %>
            <tr>
                <td colspan="6">No Record Found</td>
                
              </tr>
            <% } %>
        </tbody>
      </table>


      ============ login with jwt ======================
      loginData(req, res) {
        title = "Draft Login Page"
        let headerTitle = "Draft Login";
        const {email, password} = req.body;
        if(!email && !password) {
            message = 'Please Enter an email and a password';
            return res.status(400).render('pages/login', { title: title, header:headerTitle, message:message})
        } else if (!email && password) {
            message = 'Provide an Email';
            return res.status(400).render('pages/login', { title: title, header:headerTitle, message:message})
        }  else if (email && !password) {
            message = 'Provide an Email or a Password';
            return res.status(400).render('pages/login', { title: title, header:headerTitle, message:message})
        }
        sql = "SELECT * FROM users WHERE email = ?";
        connection.query(sql, [email], async(err, data) => {
            console.log('sql data : ' + data);
            if(err) throw err;
            //..
            if(!data || !(await bcrypt.compare(password, data[0].password))) {
                message = "Email or Password is Incorrect"
                res.status(401).render('pages/login', { title: title, header:headerTitle, message:message})
            } else {
                const id = data[0].id;
                const token = jwt.sign({id}, process.env.JWT_SECRET, {expiresIn: process.env.JWT_EXPIRES_IN});
                console.log('token is: ' + token);
                const cookiesOptions = {
                    expires: new Date(Date.now() + process.env.JWT_COOKIE_EXPIRES * 24 * 60 * 60 * 1000), httpOnly: true
                }
                // httpOnly: true means that we set our cookie if we are only in the browser environment
                res.cookie('jwt', token, cookiesOptions); // set up the cookie in the browser
                res.status(200).redirect('/draft_home');
            }
        });
    }

    ============================== reset mysql password ================

mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'your_new_password';
mysql> FLUSH PRIVILEGES;
mysql> quit;

================================== registration with node js $ mysql =======================
const express = require("express");
const router = express.Router();
const mysql_config = require('../mysql_config');
const bcrypt = require('bcryptjs');

let title = "";
let headerTitle = "Sign Up";
let message = "";

let connection = mysql_config.getConnection();
router.post('/signup', (req, res) => {
    //...
    let signdata = req.body;
    console.log(signdata);
    const {first_name, last_name, email, password, password_confirm} = req.body;
    //..
    let selectquery = "SELECT EMAIL FROM users WHERE email=?";
    connection.query(selectquery, [email], async(err, data) => {
        if(err) throw err;
        console.log(data);
        if(data.length > 0) {
            message = 'That email already exist';
            return res.render('pages/signup', { title: title, header:headerTitle, message: message})
        } else if (password != password_confirm) {
            message = 'The Password entered does not match';
            return res.render('pages/signup', { title: title, header:headerTitle, message: message});
        }
        //.. display the has password on the console
        let hashedPass = await bcrypt.hash(password, 8);
        console.log('encrypted password: ' + hashedPass);
        let insertquery = 'INSERT INTO users SET ?';
        connection.query(insertquery, {first_name: first_name, last_name: last_name, email: email, password: hashedPass}, (err, data) => {
            console.log("inserted data:  " + data);
            if (err) throw err;
            message = 'User Registered';
            return res.render("pages/signup", {title: title, header:headerTitle, message: message})
        })
    });
});
module.exports = router;

================== ejs ============
<html>
<h1>Hello, <%= username %></h1>
<br>
<h3>Shopping Cart: </h3>
<br>
<ul>
<% for(var item in cart) { %>
<li><%= item %></li>
<% } %>
</ul>
</html>


INSERT INTO `prospectlist` VALUES (1, 'Zion Williamson', 'Duke', 'PF', null, null, 0, 0, 0);
INSERT INTO `prospectlist` VALUES (2, 'Anthony Edwards', 'Georgia', 'G', null, null, 0, 0, 0);
INSERT INTO `prospectlist` VALUES (3, 'James Wiseman', 'Menphis', 'C', null, null, 0, 0, 0);
INSERT INTO `prospectlist` VALUES (4, 'Tyler Herro', 'Kentucky', 'SG', null, null, 0, 0, 0);
INSERT INTO `prospectlist` VALUES (5, 'LaMelo Ball', 'IIIawarra Hawks', 'G', null, null, 0, 0, 0);
INSERT INTO `prospectlist` VALUES (6, 'Jarrett Culver', 'Texas Tech', 'SG', null, null, 0, 0, 0);
INSERT INTO `prospectlist` VALUES (7, 'Cassius Winston', 'Michigan', 'G', null, null, 0, 0, 0);
INSERT INTO `prospectlist` VALUES (8, 'Jaxson Hayes', 'North Carolina', 'C', null, null, 0, 0, 0);
INSERT INTO `prospectlist` VALUES (9, 'Kenyon Martin Jr', 'Indiana', 'F', null, null, 0, 0, 0);
INSERT INTO `prospectlist` VALUES (10, 'Obi Toppin', 'Dayton', 'F', null, null, 0, 0, 0);
INSERT INTO `prospectlist` VALUES (11, 'Patrick Williams', 'Florida State', 'F', null, null, 0, 0, 0);
INSERT INTO `prospectlist` VALUES (12, 'Killian Hayes', 'USC', 'G', null, null, 0, 0, 0);


======================= Combining API call with ASYNC/AWAIT ================================
  const getCovidData = async () => {
      console.log("index.html 10 | Processing...");
      const request = await fetch("https://covid19.mathdro.id/api");
      const data = await request.json();
      return data;
    };

    const getMoreAPIDataWithUrl = async newUrl => {
      const request = await fetch(newUrl);
      const data = await request.json();
      return data;
    };

    const callDataInOrder = async () => {
      const covidData = await getCovidData();
      console.log("index.html 27 | covid Data", covidData);
      document.getElementById("total-cases").innerText =
        covidData.confirmed.value;

      const detailData = await getMoreAPIDataWithUrl(
        covidData.confirmed.detail
      );
      console.log("index.html 31 | detail Data", detailData);
      document.getElementById("city-of-origin").innerText =
        detailData[0].confirmed;
    };
    callDataInOrder();
    
    ========================= Method 2 Of combining Api call using PromiseAll===============
     let teamFile = fetch(teamApiUrl)
    let playerFile = fetch(playerApiUrl)
    Promise.all([teamFile, playerFile])
            .then(files => {
                processTeamData(files[0].json());
                processPlayerData(files[1].json());
            }).catch(err => {
                console.error(err);
            })
}

const processTeamData = promise => {
    promise 
        .then (data => {
            console.log('team' + data);
            drawTeamList(data);
            searchForTeamName(data)
            return data
        })
}
const processPlayerData = promise => {
    promise 
        .then (data => {
            rosterList(data);
            return data
        })
}

